#' Unifrog red palette
#' @import unikn
#' @export
unifrog_reds <- unikn::shades_of(n=7, col_1 = unifrog_colors("red"))
#' Unifrog likert3 palette
#' @import unikn
#' @export
likert3 <-
unikn::newpal(col = unifrog_colors('red', 'grey', 'blue'),
names = c('red', 'grey', 'blue'),
as_df = F)
#' Unifrog likert5 palette
#' @import unikn
#' @export
likert5 <-
unikn::newpal(col = unifrog_colors('red', 'orange', 'grey', 'yellow', 'green'),
names = c('red', 'orange', 'grey', 'yellow', 'green'),
as_df = F)
#' Unifrog likert7 palette
#' @import unikn
#' @export
likert7 <-
unikn::newpal(col = unifrog_colors('red', 'orange', 'yellow', 'grey','green','blue','purple'),
names = c('red', 'orange', 'yellow', 'grey','green','blue','purple'),
as_df = F)
unifrog_palettes <- list(unifrog_main, unifrog_blues, unifrog_greens, unifrog_oranges, unifrog_reds,likert3, likert5, likert7)
names(unifrog_palettes)
?list
names(unifrog_palettes) <- c("unifrog_main", "unifrog_blues", "unifrog_greens", "unifrog_oranges", "unifrog_reds","likert3", "likert5", "likert7")
names(unifrog_palettes)
unifrog_palettes
library(unifrog)
unifrog_palettes
library(unifrog)
#discrete
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(class))) +
geom_boxplot()
#discrete
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot()
mpg|>
ggplot(aes(x = displ, y = hwy, color = hwy)) +
geom_point()
#diverging
mpg|>
ggplot(aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_d('likert7')
#diverging
mpg|>
ggplot(aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c('likert7')
#diverging
mpg|>
ggplot(aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c('likert5')
#diverging
mpg|>
ggplot(aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c('likert3')
#diverging
mpg|>
ggplot(aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c('unifrog_main')
#diverging
mpg|>
ggplot(aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c('unifrog_greens')
#diverging
mpg|>
ggplot(aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c('unifrog_reds')
library(unifrog)
pal <- ifelse(reverse, rev(usecol("unifrog_main")), usecol("unifrog_main"))
pal <- ifelse(TRUE, rev(usecol("unifrog_main")), usecol("unifrog_main"))
library(unifrog)
#discrete
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot()
library(ggplot2)
#discrete
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot()
library(tidyverse)
#discrete
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot()
rev(usecol(unifrog_main))
#discrete
library(tidyverse)
library(unifrog)
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot()
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot() +
scale_fill_unifrog_d()
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot() +
scale_fill_unifrog_d(reverse = T)
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot() +
scale_fill_unifrog_d(reverse = F)
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot() +
scale_fill_unifrog_d('likert5', reverse = F)
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot() +
scale_fill_unifrog_d('likert5', reverse = T)
library(unifrog)
#discrete
library(tidyverse)
mpg|>
mutate(class = as_factor(class)) |>
ggplot(aes(x = class, y = hwy, fill = factor(cyl))) +
geom_boxplot() +
scale_fill_unifrog_d(reverse = T)
roxygen2::roxygenize()
library(unifrog)
roxygen2::roxygenize()
library(unifrog)
usethis::use_readme_rmd()
usethis::use_pkgdown_github_pages()
devtools::build_site()
load_all()
devtools::load_all()
getAzureResults('vignettes/query_name.sql', 'vignettes/query_results.csv')
getAzureResults(glue::glue_sql(readr::read_file('vignettes/query_name.sql')), 'vignettes/query_results.csv')
getAzureResults(glue::glue_sql(readr::read_file('vignettes/query_name.sql')), 'vignettes/query_results.csv', overwrite = T)
devtools:::document()
pkgdown:::build_site_external()
devtools:::document()
devtools::load_all()
?unifrog_main
devtools::build_site()
devtools::document()
devtools::check()
devtools::build_site()
?unikn::seecol
devtools::document()
devtools::build_site()
devtools::document()
?unikn::seecol
library(unifrog)
library(readr)
query_text <- read_file("query_name.sql")
query_text
require(glue)
library(glue)
query <- glue_sql(query_text)
query
results <- getAzureResults(SQLscript = query,
output = "query_results.csv")
results
results <- getAzureResults(SQLscript = query,
output = "query_results.csv",
overwrite = TRUE)
results
usethis::use_package('glue')
library(unifrog)
devtools::build_site()
devtools::document()
devtools::build_site()
usethis::use_version()
devtools::build_site()
library(unifrog)
unlink("README_cache", recursive = TRUE)
devtools::document()
devtools::build_site()
devtools::document()
devtools::build_site()
devtools::document()\
devtools::document()
devtools::build_site()
.Last.error
devtools::build_site()
library(usethis)
use_mit_license()
use_pkgdown()
library(devtools)
document()
build_site()
devtools::build_readme()
devtools::build_vignettes()
build_site()
devtools::build_site()
usethis::use_mit_license()
devtools::build_site()
library(unifrog)
styler:::set_style_transformers()
styler:::style_active_pkg()
usethis::edit_r_profile()
usethis::edit_r_environ()
devtools::document()
devtools::build_site()
library(unifrog)
usethis::edit_r_profile()
install.packages("arrow")
con <- dbConnect(
odbc(),
Driver = keyring::key_get("driver"),
Server = keyring::key_get("server"),
Database = keyring::key_get("database"),
UID = keyring::key_get("uid"),
PWD = keyring::key_get("pwd"),
Port = keyring::key_get("port")
)
library(DBI)
con <- dbConnect(
odbc(),
Driver = keyring::key_get("driver"),
Server = keyring::key_get("server"),
Database = keyring::key_get("database"),
UID = keyring::key_get("uid"),
PWD = keyring::key_get("pwd"),
Port = keyring::key_get("port")
)
library(odbc)
con <- dbConnect(
odbc(),
Driver = keyring::key_get("driver"),
Server = keyring::key_get("server"),
Database = keyring::key_get("database"),
UID = keyring::key_get("uid"),
PWD = keyring::key_get("pwd"),
Port = keyring::key_get("port")
)
SQLscript <- glue::glue_sql(readr::read_file('vignettes/queries/query_name.sql'))
raw <- dbGetQuery(con, SQLscript)
dbDisconnect(con)
output <- 'vignettes/data/query_results.parquet'
arrow::write_parquet(raw, output)
rm(raw)
raw <- arrow::read_parquet(output)
styler:::style_active_pkg()
devtools::build_site()
library(unifrog)
gc()
devtools::document()
devtools::check()
set_wd('vignettes')
setwd("C:/Users/ishma/Dropbox (Unifrog)/Team AC/10 Data Team/Analytics/Ishmaels Folder/Projects/unifrog/vignettes")
devtools::load_all()
library(unifrog)
query <- "queries/query_name.sql"
results <- getAzureResults(
SQLscript = query,
)
library(tidyverse)
devtools::load_all()
query <- "queries/query_name.sql"
results <- getAzureResults(
SQLscript = query,
)
devtools::load_all()
query <- "queries/query_name.sql"
results <- getAzureResults(
SQLscript = query,
)
results
results <- getAzureResults(
SQLscript = query,
output = "data/query_name.parquet",
overwrite = TRUE
)
results
query_text <- read_file("queries/query_name.sql")
query_text
modified <- query_text |>
str_replace("student_year_of_graduation", "student_school")
modified
library(glue)
query <- glue_sql(modified)
query
results <- getAzureResults(
SQLscript = query,
output = "data/query_results2.parquet",
glued = FALSE
)
results
devtools::check()
devtools::build_site()
gc()
devtools::build_site()
library(unifrog)
devtools::build_site()
library(unifrog)
unifrog_colors()
unifrog_colors("green", "lightblue", "darkgrey")
unifrog_colors("green", "teal", "darkgrey")
library(unikn)
seecol(unifrog_colors(), main = "The entire Unifrog colour scheme")
seecol(unifrog_main, main = "The \"main\" palette is default for discrete data")
seecol(likert3, main = "The \"likert3\" palette is default for continuous data")
seecol(unifrog_palettes,
main = "The names of all of the Unifrog palettes",
pal_names = names(unifrog_palettes)
)
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic()
library(ggplot2)
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic()
#| code-line-numbers: true
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic() +
scale_fill_unifrog_d()
#| code-line-numbers: true
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic() +
scale_fill_unifrog_d(reverse = TRUE)
#| code-line-numbers: true
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = fct_rev(Species))) +
geom_boxplot() +
theme_classic() +
scale_fill_unifrog_d()
library(forcats)
#| code-line-numbers: true
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = fct_rev(Species))) +
geom_boxplot() +
theme_classic() +
scale_fill_unifrog_d()
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_violin() +
scale_fill_unifrog_d(palette = "unifrog_greens") +
theme_classic()
ggplot(mpg, aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
theme_bw()
ggplot(mpg, aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c("likert5") +
theme_bw()
library(unifrog)
library(ggplot2)
library(forcats)
library(unifrog)
### Unifrog Colors
This extracts the unifrog palette colours as hex codes. Examples below.
```{r unifrog_colors}
unifrog_colors()
unifrog_colors("green", "teal", "darkgrey")
seecol(unifrog_colors(), main = "The entire Unifrog colour scheme")
seecol(unifrog_main, main = "The \"main\" palette is default for discrete data")
seecol(likert3, main = "The \"likert3\" palette is default for continuous data")
seecol(unifrog_palettes,
main = "The names of all of the Unifrog palettes",
pal_names = names(unifrog_palettes)
)
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic()
#| code-line-numbers: true
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic() +
scale_fill_unifrog_d()
```{r}
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_violin() +
scale_fill_unifrog_d(palette = "unifrog_greens") +
theme_classic()
ggplot(mpg, aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
theme_bw()
library(unifrog)
seecol(unifrog_main, main = "The \"main\" palette is default for discrete data")
library(unifrog)
library(ggplot2)
library(forcats)
library(unifrog)
seecol(unifrog_main, main = "The \"main\" palette is default for discrete data")
library(unifrog)
library(ggplot2)
library(forcats)
library(unifrog)
seecol(unifrog_main, main = "The \"main\" palette is default for discrete data")
library(unifrog)
library(ggplot2)
library(forcats)
library(unifrog)
seecol(unifrog_main, main = "The \"main\" palette is default for discrete data")
library(unifrog)
devtools::build_site()
library(unifrog)
getwd()
setwd("C:/Users/ishma/Dropbox (Unifrog)/Team AC/10 Data Team/Analytics/Ishmaels Folder/Projects/unifrog/vignettes")
query <- "queries/query_name.sql"
results <- getAzureResults(
SQLscript = query,
)
results
library(readr)
query_text <- read_file("queries/query_name.sql")
query_text
library(stringr)
modified <- query_text |>
str_replace("student_year_of_graduation", "student_school")
modified
library(glue)
query <- glue_sql(modified)
query
results <- getAzureResults(
SQLscript = query,
output = "data/query_results2.parquet",
glued = FALSE
)
results
library(ggplot2)
library(forcats)
library(unifrog)
unifrog_colors()
unifrog_colors("green", "teal", "darkgrey")
library(unikn)
seecol(unifrog_colors(), main = "The entire Unifrog colour scheme")
seecol(unifrog_main, main = "The \"main\" palette is default for discrete data")
seecol(unifrog_palettes,
main = "The names of all of the Unifrog palettes",
pal_names = names(unifrog_palettes)
)
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic()
#| code-line-numbers: true
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic() +
scale_fill_unifrog_d()
#| code-line-numbers: true
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
theme_classic() +
scale_fill_unifrog_d(reverse = TRUE)
#| code-line-numbers: true
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = fct_rev(Species))) +
geom_boxplot() +
theme_classic() +
scale_fill_unifrog_d()
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_violin() +
scale_fill_unifrog_d(palette = "unifrog_greens") +
theme_classic()
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_violin() +
scale_fill_unifrog_d(palette = "unifrog_teals") +
theme_classic()
ggplot(mpg, aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
theme_bw()
ggplot(mpg, aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c("likert5") +
theme_bw()
ggplot(mpg, aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c("likert5") +
theme_unifrog()
ggplot(mpg, aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
scale_color_unifrog_c("likert5") +
unifrog_theme()
ggplot(mpg, aes(x = displ, y = hwy, color = hwy)) +
geom_point() +
unifrog_theme()
setwd("C:/Users/ishma/Dropbox (Unifrog)/Team AC/10 Data Team/Analytics/Ishmaels Folder/Projects/unifrog")
devtools::document()
devtools::build_site()
library(unifrog)
devtools::build_site()
devtools::install_github("IshmaelRoslan/UnifrogTools")
library(unifrog)
macfixAzure
devtools::install_github("IshmaelRoslan/UnifrogTools")
devtools::install_github("IshmaelRoslan/UnifrogTools", force=TRUE)
3
library(unifrog)
macfixAzure
devtools::install_github("IshmaelRoslan/UnifrogTools")
library(unifrog)
macfixAzure
devtools::build_site()
